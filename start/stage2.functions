var(){
   local IFS=$(echo -en "?")
   if [ "$1" == "-" ]
   then
      local tmp="$env_list"
   else
      local tmp="$(echo $env_list | /usr/bin/awk -v section=$1 -F '_' '$1==section{s=""; for (i=1; i < NF; i++) s = s $i "_"; print s $NF}')"
   fi
   if [ -z "$tmp" ]
   then
      echo "notSet"
   else
      if [ -z "$2" ]
      then
         echo $tmp | /usr/bin/awk -F '=' '{print $1}'
      else
         echo $tmp | /usr/bin/awk -v param=$2 -F '=' '$1==param{s=""; for (i=1; i < NF; i++) s = s $i "="; print s $NF; exit;}'
      fi
   fi
}

trySetPermissionsOf(){
   local obj="$1"
   local flag="$2"
   set +e
   if [ -n "$LINUX_USER" ]
   then
      if [ "$(/bin/stat -c "%U" "$obj")" != "$LINUX_USER" ]
      then
         /bin/chown $flag :$LINUX_USER "$obj"
         /bin/chmod $flag g+rX "$obj"
      fi
   fi
   /bin/chmod $flag o= "$obj"
   set -e
}

tryMakeDir(){
   local dir="$(echo "$1" | /usr/bin/tr -d "'")"
   /bin/mkdir -p "$dir"
   trySetPermissionsOf "$dir" "$2"
}

tryMakeFile(){
   local file="$(echo "$1" | /usr/bin/tr -d "'")"
   tryMakeDir "$(/usr/bin/dirname "$file")" "$2"
   set +e
   /bin/touch "$file"
   set -e
   trySetPermissionsOf "$file"
}

tryDelete(){
   local obj="$(echo "$1" | /usr/bin/tr -d "'")"
   /bin/rm -rf "$obj"
}

trim(){
   echo "$1" | /usr/bin/awk '{$1=$1;print}'
}

toLower(){
   echo "$1" | /usr/bin/tr '[:upper:]' '[:lower:]'
}

listFromFile(){
   local file="$(echo "$1" | /usr/bin/tr -d "'")"
   local list="$(/bin/cat "$file")"
   echo "$list" | /usr/bin/cut -c 5- | /usr/bin/tr -dc '[:alnum:]_ %,\052\055.:=/\012\047\043\134'
}

makeAllFromList(){
   local IFS=$(echo -en "\n\b,")
   local envlist="$1"
   local types="File,Dir"
   for type in $types
   do
      local type_lc="$(toLower $type)"
      set +e
      local matches="$(echo "$envlist" | /bin/grep -iE "_$type_lc(s|ectory|ectories)? *=")"
      set -e
      for match in $matches
      do
         local objects="$(echo "$match" | /usr/bin/awk -F '=' '{s=""; for (i=2; i < NF; i++) s = s $i "="; print s $NF; exit;}')"
         for obj in $objects
         do
            tryMake$type "$obj"
         done
      done
   done
}

makePwFileForUser(){
   local userName="$(toLower "$1")"
   eval "local pwFile=\$VAR_password_file_$userName"
   if [ -z "$pwFile" ]
   then
      local pwFile="/environment/$userName.pw"
   fi
   tryMakeFile "$pwFile"
   if [ ! -s "$pwFile" ]
   then
      eval "local userPw=\$VAR_password_$userName"
      if [ -z "$userPw" ]
      then
         local userPw="$(/usr/bin/tr -cd '[:alnum:]' < /dev/urandom | /usr/bin/fold -w30 | /usr/bin/head -n1)"
      fi
      if [ "$VAR_ENCRYPT_PW" == "yes" ]
      then
         if [ -s "$VAR_SALT_FILE" ]
         then
            local salt="$(/bin/cat "$VAR_SALT_FILE")"
         fi
         userPw="$(echo -n "$userPw" | /usr/bin/argon2 "$salt" -r)"
      fi
      echo -n "$userPw" > "$pwFile"
   fi
   echo "$pwFile"
}

readFirstrunEnvironment(){
   . /environment/firstrun
   rm -f /environment/firstrun
   makeAllFromList "$(set | /bin/grep -i "^VAR_")"
}

writeRestartEnvironment(){
   set | /bin/grep -i "^VAR_" > /environment/restart
}

readRestartEnvironment(){
   . /environment/restart
}

setConst(){
   local name=$1
   local value="$(var - "VAR_$name")"
   if [ "$value" != "notSet" ]
   then
      readonly CONST_"$name"="$value"
      unset "VAR_$name"
   fi
}

executeCommandAsLinuxUser(){
   local command="$(eval "echo $1")"
   executeCommand "/usr/local/bin/sudo -u $VAR_LINUX_USER $command"
}

tryRunStage(){
   if [ -f "/start/stage$1" ]
   then
      . "/start/stage$1"
      local next="$(/usr/bin/expr $1 + 1)"
      tryRunStage $next
   fi
}
