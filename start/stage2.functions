# Passed from stage2:
# -------------------------------------------
# set -e +a +m +s +i -f
# VAR_*

trySetPermissionsOf(){
   local obj="$1"
   local flag="$2"
   set +e
   if [ "$(/bin/stat -c "%U" "$obj")" != "$LINUX_USER" ]
   then
      /bin/chown $flag :$LINUX_USER "$obj"
      /bin/chmod $flag g+rX "$obj"
   fi
   /bin/chmod $flag o= "$obj"
   set -e
}

tryMakeDir(){
   local dir="$(echo "$1" | /usr/bin/tr -d "'")"
   if [ ! -d "$dir" ]
   then
      /bin/mkdir -p "$dir"
      trySetPermissionsOf "$dir" "$2"
   fi
}

tryMakeFile(){
   local file="$(echo "$1" | /usr/bin/tr -d "'")"
   if [ ! -f "$file" ]
   then
      tryMakeDir "$(/usr/bin/dirname "$file")" "$2"
      set +e
      /bin/touch "$file"
      set -e
      trySetPermissionsOf "$file"
   fi
}

tryDelete(){
   local obj="$(echo "$1" | /usr/bin/tr -d "'")"
   /bin/rm -rf "$obj"
}

trim(){
   echo "$1" | /usr/bin/awk '{$1=$1;print}'
}

toLower(){
   echo "$1" | /usr/bin/tr '[:upper:]' '[:lower:]'
}

makeAllFromList(){
   local IFS=$(echo -en "\n\b,")
   local envlist="$1"
   local types="File,Dir"
   for type in $types
   do
      local type_lc="$(toLower $type)"
      set +e
      local matches="$(echo "$envlist" | /bin/grep -iE "_$type_lc(s|ectory|ectories)? *=")"
      set -e
      for match in $matches
      do
         local objects="$(echo "$match" | /usr/bin/awk -F '=' '{s=""; for (i=2; i < NF; i++) s = s $i "="; print s $NF; exit;}')"
         for obj in $objects
         do
            tryMake$type "$obj"
         done
      done
   done
}

makePwFileForUser(){
   local userName="$(toLower "$1")"
   eval "local pwFile=\$VAR_password_file_$userName"
   if [ -z "$pwFile" ]
   then
      local pwFile="/environment/$userName.pw"
   fi
   /bin/touch "$pwFile"
   /bin/chmod go= "$pwFile"
   if [ ! -s "$pwFile" ]
   then
      eval "local userPw=\$VAR_password_$userName"
      if [ -z "$userPw" ]
      then
         local userPw="$(/usr/bin/tr -cd '[:alnum:]' < /dev/urandom | /usr/bin/fold -w30 | /usr/bin/head -n1)"
      fi
      if [ "$VAR_ENCRYPT_PW" == "yes" ]
      then
         if [ -s "$VAR_SALT_FILE" ]
         then
            local salt="$(/bin/cat "$VAR_SALT_FILE")"
         else
            local salt="$(hostname)"
         fi
         userPw="$(echo -n "$userPw" | /usr/bin/argon2 "$salt" -r)"
      fi
      echo -n "$userPw" > "$pwFile"
   fi
   /bin/chown $VAR_LINUX_USER "$pwFile"
   /bin/chmod u=r,go= "$pwFile"
   echo "$pwFile"
}

readFirstrunEnvironment(){
   . /environment/firstrun
   rm -f /environment/firstrun
   makeAllFromList "$(allVARs)"
}

writeRestartEnvironment(){
   allVARs > /environment/restart
}

readRestartEnvironment(){
   . /environment/restart
}

executeCommandAsLinuxUser(){
   local command="$(eval "echo $1")"
   executeCommand "/usr/local/bin/sudo -u $VAR_LINUX_USER $command"
}

tryRunStage(){
   if [ -f "/start/stage$1" ]
   then
      . "/start/stage$1"
      tryRunStage "$(( $1 + 1 ))"
   fi
}
