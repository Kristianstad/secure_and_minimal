# Passed from stage2:
# -------------------------------------------
# set -e +a +m +s +i -f
# VAR_*

. /start/common.functions

trySetPermissionsOf(){
   local obj="$(removeQuotes $1)"
   local flag=$2
   set +e
   if [ "$(/bin/stat -c "%U" "$obj")" != "$VAR_LINUX_USER" ]
   then
      /bin/chown $flag :$VAR_LINUX_USER "$obj"
      /bin/chmod $flag g+rX "$obj"
   fi
   /bin/chmod $flag o= "$obj"
   set -e
}

fixPermissionsForConfigDir(){
   /bin/chown -R $VAR_LINUX_USER:root "$VAR_CONFIG_DIR"
   /bin/chmod 7770 "$VAR_CONFIG_DIR"
   if [ "$(ls -A "$VAR_CONFIG_DIR")" ]
   then
      set +f
      /bin/chmod -R ug=rwX,o= "$VAR_CONFIG_DIR/"*
      set -f
   fi
}

fixPermissionsForUsrLocalBin(){
   local IFS=$(echo -en "\n\b")
   files="$(/usr/bin/find /usr/local/bin -type f -not -name 'sudo')"
   for file in $files
   do
      trySetPermissionsOf "$file"
      /bin/chmod ug+x "$file"
   done
}

tryMakeDir(){
   local dir="$(removeQuotes $1)"
   if [ ! -d "$dir" ]
   then
      /bin/mkdir -p "$dir"
      trySetPermissionsOf "$dir" "$2"
   fi
}

tryMakeFile(){
   local file="$(removeQuotes $1)"
   if [ ! -f "$file" ]
   then
      tryMakeDir "$(/usr/bin/dirname "$file")" "$2"
      set +e
      /bin/touch "$file"
      set -e
      trySetPermissionsOf "$file"
   fi
}

tryDelete(){
   /bin/rm -rf "$(removeQuotes $1)"
}

makeAllFromList(){
   local IFS=$(echo -en "\n\b,")
   local types="File,Dir"
   for type in $types
   do
      local type_lc="$(toLower $type)"
      set +e
      local matches="$(echo "$1" | /bin/grep -iE "_$type_lc(s|ectory|ectories)? *=")"
      set -e
      for match in $matches
      do
         local values=${match#*=}
         for value in $values
         do
            tryMake$type $value
         done
      done
   done
}

makePwFileForUser(){
   local userName="$(toLower "$1")"
   eval "local pwFile=\$VAR_password_file_$userName"
   if [ -z "$pwFile" ]
   then
      local pwFile="/environment/$userName.pw"
   fi
   /bin/touch "$pwFile"
   /bin/chmod go= "$pwFile"
   if [ ! -s "$pwFile" ]
   then
      eval "local userPw=\$VAR_password_$userName"
      if [ -z "$userPw" ]
      then
         local userPw="$(/usr/bin/tr -cd '[:alnum:]' < /dev/urandom | /usr/bin/fold -w30 | /usr/bin/head -n1)"
      fi
      if [ "$VAR_ENCRYPT_PW" == "yes" ]
      then
         if [ -s "$VAR_SALT_FILE" ]
         then
            local salt="$(/bin/cat "$VAR_SALT_FILE")"
         else
            local salt="$(hostname)"
         fi
         if [ -z "$VAR_ARGON2_PARAMS" ]
         then
            VAR_ARGON2_PARAMS="-r"
         fi
         userPw="$(echo -n "$userPw" | /usr/bin/argon2 "$salt" $VAR_ARGON2_PARAMS)"
      fi
      echo -n "$userPw" > "$pwFile"
   fi
   /bin/chown $VAR_LINUX_USER:root "$pwFile"
   /bin/chmod ug=r,o= "$pwFile"
   echo "$pwFile"
}

readFirstrunEnvironment(){
   . /environment/firstrun
   rm -f /environment/firstrun
   makeAllFromList "$(allVARs noquote)"
}

writeRestartEnvironment(){
   allVARs quote > /environment/restart
}

readRestartEnvironment(){
   . /environment/restart
}

executeCommandAsLinuxUser(){
   local command="$(eval "echo $1")"
   executeCommand "/usr/local/bin/sudo -u $VAR_LINUX_USER $command"
}

tryRunStage(){
   if [ -f "/start/stage$1" ]
   then
      . "/start/stage$1"
      tryRunStage "$(( $1 + 1 ))"
   fi
}

configFromVarGroup(){
   if [ -z "$2" ]
   then
      local p1="noquote"
   else
      local p1=$2
   fi
   allVARs $p1 _$1
}
