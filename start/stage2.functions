# Set in stage2:
# -------------------------------------------
# set -e +a +m +s +i -f

createLinuxUser(){
   if [ ! $(/usr/bin/getent group $VAR_LINUX_USER) ]
   then
      /usr/sbin/addgroup -S $VAR_LINUX_USER
   fi
   if [ ! $(/usr/bin/getent passwd $VAR_LINUX_USER) ]
   then
      /usr/sbin/adduser -D -S -H -s /bin/false -u 102 -G $VAR_LINUX_USER $VAR_LINUX_USER
   fi
}

updateSudoersConf(){
   echo "starter "$(/bin/hostname)"=(root) NOPASSWD: /start/stage1" > /etc/sudoers.d/docker2
}

fixHosts(){
   if [ ! -s "/etc/hosts" ]
   then
      echo "127.0.0.1 localhost $(hostname)" > /etc/hosts
   fi
}


trim(){
   echo "$1" | /usr/bin/awk '{$1=$1;print}'
}

toLower(){
   echo "$1" | /usr/bin/tr '[:upper:]' '[:lower:]'
}

removeCharacterFromString(){
   echo "$2" | /usr/bin/tr -d "$1"
}

removeUnderscores(){
   removeCharacterFromString _ $1
}

removeSingleQuotes(){
   removeCharacterFromString "'" $1
}

removeDoubleQuotes(){
   removeCharacterFromString '"' $1
}

removeQuotes(){
   local tmp="$(removeSingleQuotes $1)"
   removeDoubleQuotes $tmp
}

removePrefixFromVar(){
   local prefix=$1
   local string=$2
   echo ${string#$prefix}
}

allVars(){
   local IFS=$(echo -en "\n\b")
   local tmp="$(set | grep -E "^VAR$2_")"
   local vars=""
   local delimiter=""
   for var in $tmp
   do
      if [ -n "$2" ]
      then
         var=${var#VAR$2_}
      fi
      if [ "$1" != "quote" ]
      then
         local varName=${var%%=*}
         if [ "$1" == "noUnderscore" ]
         then
            local varName="$(echo "$varName" | /usr/bin/tr '_' ' ')"
         fi
         eval "local varValue=${var#*=}"
         var="$varName=$varValue"
      fi
      vars="$vars$delimiter$var"
      local delimiter=$'\n'
   done
   local IFS=$(echo -en "")
   echo "$vars"
}

execCmd(){
   local IFS=$IFS_bak
   local command="$(eval "echo $1")"
   exec /usr/bin/env -i $command
}


trySetPermissionsOf(){
   local obj="$(removeQuotes $1)"
   local flag=""
   if [ "$3" == "recursive" ]
   then
      local flag="-R"
   fi
   set +e
   if [ "$2" == "write" ]
   then
      /bin/chown $VAR_LINUX_USER "$obj"
      /bin/chmod $flag ug+w "$obj"
   fi
   if [ "$(/bin/stat -c "%U" "$obj")" != "$VAR_LINUX_USER" ]
   then
      /bin/chown $flag :$VAR_LINUX_USER "$obj"
      /bin/chmod $flag g+rX "$obj"
   fi
   /bin/chmod $flag o= "$obj"
   if [ "$2" == "exec" ]
   then
      /bin/chmod $flag ug+x "$obj"
   elif [ "$2" == "secret" ]
   then
      /bin/chmod $flag g= "$obj"
   fi
   set -e
}

fixPermissionsForConfigDir(){
   trySetPermissionsOf "$VAR_CONFIG_DIR" write recursive
}

fixPermissionsForUsrLocalBin(){
   local IFS=$(echo -en "\n\b")
   files="$(/usr/bin/find /usr/local/bin -type f -not -name 'sudo')"
   for file in $files
   do
      trySetPermissionsOf "$file" exec
   done
}

tryMakeTypeObject(){
   local obj="$(removeQuotes $2)"
   if [ ! -e "$obj" ]
   then
      tryMakeDir "$(/usr/bin/dirname "$obj")" $3
      set +e
      if [ "$1" == "dir" ]
      then
         /bin/mkdir "$obj"
      elif [ "$1" == "file" ]
      then
         /bin/touch "$obj"
      fi
      set -e
      trySetPermissionsOf "$obj" $3
   fi
}

tryMakeDir(){
   tryMakeTypeObject dir $1 $2
}

tryMakeFile(){
   tryMakeTypeObject file $1 $2
}

tryDelete(){
   /bin/rm -rf "$(removeQuotes $1)"
}

makeAllFromList(){
   local IFS=$(echo -en "\n\b,")
   local types="File,Dir"
   for type in $types
   do
      local type_lc="$(toLower $type)"
      set +e
      local matches="$(echo "$1" | /bin/grep -iE "_$type_lc(s|ectory|ectories)? *=")"
      set -e
      for match in $matches
      do
         local p2=""
         if [ $(echo $match | /bin/grep -iE "(pass|pw|sec|salt|key)[^=]*=") ]
         then
            local p2="secret"
         elif [ $(echo $match | /bin/grep -iE "(conf|sock|storage|data|_log_)[^=]*=") ] || [ $(echo $match | /bin/grep "$VAR_CONFIG_DIR") ]
         then
            local p2="write"
         fi
         local values=${match#*=}
         for value in $values
         do
            tryMake$type $value $p2
         done
      done
   done
}

makePwFileForUser(){
   local userName="$(toLower "$1")"
   eval "local pwFile=\$VAR_password_file_$userName"
   if [ -z "$pwFile" ]
   then
      local pwFile="/init/$userName.pw"
   fi
   /bin/touch "$pwFile"
   /bin/chown $VAR_LINUX_USER "$pwFile"
   /bin/chmod go= "$pwFile"
   if [ ! -s "$pwFile" ]
   then
      eval "local userPw=\$VAR_password_$userName"
      if [ -z "$userPw" ]
      then
         local userPw="$(/usr/bin/tr -cd '[:alnum:]' < /dev/urandom | /usr/bin/fold -w30 | /usr/bin/head -n1)"
      fi
      if [ "$VAR_ENCRYPT_PW" == "yes" ]
      then
         if [ -s "$VAR_SALT_FILE" ]
         then
            local salt="$(/bin/cat "$VAR_SALT_FILE")"
         else
            local salt="$(hostname)"
         fi
         if [ -z "$VAR_ARGON2_PARAMS" ]
         then
            VAR_ARGON2_PARAMS="-r"
         fi
         userPw="$(echo -n "$userPw" | /usr/bin/argon2 "$salt" $VAR_ARGON2_PARAMS)"
      fi
      echo -n "$userPw" > "$pwFile"
   fi
   /bin/chown $VAR_LINUX_USER:root "$pwFile"
   /bin/chmod ug=r,o= "$pwFile"
   echo "$pwFile"
}

readEnvironmentVars(){
   . /environment/vars
   if [ "$1" == "firstrun" ]
   then
      makeAllFromList "$(allVars noquote)"
   fi
}

execCmdAsLinuxUser(){
   if [ -n "$1" ]
   then
      local command="$(eval "echo $1")"
   else
      local command='/bin/echo "execCmdAsLinuxUser: Nothing to do!"'
   fi
   execCmd "/usr/local/bin/sudo -u $VAR_LINUX_USER $command"
}

runCmdAsLinuxUser(){
   local IFS=$IFS_bak
   eval "/usr/bin/env -i /usr/local/bin/sudo -u $VAR_LINUX_USER $1"
}

configFromVarGroup(){
   if [ -z "$2" ]
   then
      local p1="noquote"
   else
      local p1=$2
   fi
   allVars $p1 _$1
}

tryRunStage(){
   if [ -f "/start/stage$1" ]
   then
      . "/start/stage$1"
      tryRunStage "$(( $1 + 1 ))"
   fi
}
