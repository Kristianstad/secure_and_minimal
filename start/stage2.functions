# Set in stage2:
# -------------------------------------------
# set -e +a +m +s +i -f

createLinuxUser(){
   if [ ! $(/usr/bin/getent group $VAR_LINUX_USER) ]
   then
      /usr/sbin/addgroup -S $VAR_LINUX_USER
   fi
   if [ ! $(/usr/bin/getent passwd $VAR_LINUX_USER) ]
   then
      /usr/sbin/adduser -D -S -H -s /bin/false -u 102 -G $VAR_LINUX_USER $VAR_LINUX_USER
   fi
}

updateSudoersConf(){
   echo "starter "$(/bin/hostname)"=(root) NOPASSWD: /start/start" > /etc/sudoers.d/docker2
}

fixHosts(){
   if [ ! -s "/etc/hosts" ]
   then
      echo "127.0.0.1 localhost $(hostname)" > /etc/hosts
   fi
}


trim(){
   echo "$1" | /usr/bin/awk '{$1=$1;print}'
}

toLower(){
   echo "$1" | /usr/bin/tr '[:upper:]' '[:lower:]'
}

removeCharacterFromString(){
   echo "$2" | /usr/bin/tr -d "$1"
}

removeUnderscores(){
   removeCharacterFromString _ $1
}

removeSingleQuotes(){
   removeCharacterFromString "'" $1
}

removeDoubleQuotes(){
   removeCharacterFromString '"' $1
}

removeQuotes(){
   local tmp="$(removeSingleQuotes $1)"
   removeDoubleQuotes $tmp
}

allVars(){
   local IFS=$(echo -en "\n\b")
   local tmp="$(set | grep -E "^VAR$2_")"
   local vars=""
   local delimiter=""
   local varName=""
   local varValue=""
   for var in $tmp
   do
      if [ -n "$2" ]
      then
         var=${var#VAR$2_}
      fi
      if [ "$1" != "quote" ]
      then
         varName=${var%%=*}
         if [ "$1" == "noUnderscore" ]
         then
            varName="$(echo "$varName" | /usr/bin/tr '_' ' ')"
         fi
         eval "varValue=${var#*=}"
         var="$varName""=""$varValue"
      fi
      vars="$vars$delimiter$var"
      delimiter=$'\n'
   done
   IFS=$(echo -en "")
   echo "$vars"
}

execCmd(){
   local IFS=$IFS_bak
   local command="$(eval "echo $1")"
   exec /usr/bin/env -i $command
}


trySetPermissionsOf(){
   local obj="$(removeQuotes $1)"
   local flag=""
   if [ "$3" == "recursive" ]
   then
      flag="-R"
   fi
   local -
   set +e
   if [ "$2" == "write" ]
   then
      /bin/chown $VAR_LINUX_USER "$obj"
      /bin/chmod $flag ug+w "$obj"
   fi
   if [ "$(/bin/stat -c "%U" "$obj")" != "$VAR_LINUX_USER" ]
   then
      /bin/chown $flag :$VAR_LINUX_USER "$obj"
      /bin/chmod $flag g+rX "$obj"
   fi
   /bin/chmod $flag o= "$obj"
   if [ "$2" == "exec" ]
   then
      /bin/chmod $flag ug+x "$obj"
   elif [ "$2" == "secret" ]
   then
      /bin/chmod $flag g= "$obj"
   fi
   set -e
}

fixPermissionsForConfigDir(){
   trySetPermissionsOf "$VAR_CONFIG_DIR" write recursive
}

fixPermissionsForUsrLocalBin(){
   local IFS=$(echo -en "\n\b")
   local files="$(/usr/bin/find /usr/local/bin -type f -not -name 'sudo')"
   for file in $files
   do
      trySetPermissionsOf "$file" exec
   done
}

tryMakeTypeObject(){
   local obj="$(removeQuotes $2)"
   local -
   if [ ! -e "$obj" ]
   then
      tryMakeDir "$(/usr/bin/dirname "$obj")" $3
      set +e
      if [ "$1" == "dir" ]
      then
         /bin/mkdir "$obj"
      elif [ "$1" == "file" ]
      then
         /bin/touch "$obj"
      fi
      set -e
      trySetPermissionsOf "$obj" $3
   fi
}

tryMakeDir(){
   tryMakeTypeObject dir $1 $2
}

tryMakeFile(){
   tryMakeTypeObject file $1 $2
}

tryDelete(){
   /bin/rm -rf "$(removeQuotes $1)"
}

makeAllFromList(){
   local IFS=$(echo -en "\n\b,")
   local types="File,Dir"
   local type_lc=""
   local matches=""
   local p2=""
   local values=""
   local -
   for type in $types
   do
      type_lc="$(toLower $type)"
      set +e
      matches="$(echo "$1" | /bin/grep -iE "_$type_lc(s|ectory|ectories)? *=")"
      set -e
      for match in $matches
      do
         p2=""
         if [ $(echo $match | /bin/grep -iE "(pass|pw|sec|salt|key)[^=]*=") ]
         then
            p2="secret"
         elif [ $(echo $match | /bin/grep -iE "(conf|sock|storage|data|_log_)[^=]*=") ] || [ $(echo $match | /bin/grep "$VAR_CONFIG_DIR") ]
         then
            p2="write"
         fi
         values=${match#*=}
         for value in $values
         do
            tryMake$type $value $p2
         done
      done
   done
}

returnFileWithNlEnding(){
   local file=$1
   if [ $(tail -c 1 "$file" | wc -l) -eq 0 ]
   then
      file="$(mktemp -d)/$(/usr/bin/basename "$file")"
      cp --preserve=all "$1" "$file"
   fi
   echo "$file"
}

makePwFileForUser(){
   local userName="$(toLower "$1")"
   eval "local pwFile=\$VAR_password_file_$userName"
   if [ -z "$pwFile" ]
   then
      pwFile="$(mktemp)"
   fi
   if [ ! -s "$pwFile" ]
   then
      eval "local userPw=\$VAR_password_$userName"
      if [ -z "$userPw" ]
      then
         userPw="$(/usr/bin/tr -cd '[:alnum:]' < /dev/urandom | /usr/bin/fold -w30 | /usr/bin/head -n1)"
      fi
      if [ "$VAR_ENCRYPT_PW" == "yes" ]
      then
         local salt=""
         local saltFile="$(returnFileWithNlEnding "$VAR_SALT_FILE")"
         read salt < "$saltFile"
         if [ "$saltFile" != "$VAR_SALT_FILE" ]
         then
            rm -rf "$(/usr/bin/dirname "$saltFile")"
         fi
         userPw="$(echo -n "$userPw" | /usr/bin/argon2 "$salt" $VAR_ARGON2_PARAMS)"
      fi
      echo -n "$userPw" > "$pwFile"
   fi
   if [ $(tail -c 1 "$pwFile" | wc -l) -eq 0 ]
   then
      echo >> "$pwFile"
   fi
   echo "$pwFile"
}

execCmdAsLinuxUser(){
   local command=""
   if [ -n "$1" ]
   then
      command="$(eval "echo $1")"
   else
      command='/bin/echo "execCmdAsLinuxUser: Nothing to do!"'
   fi
   execCmd "/usr/local/bin/sudo -u $VAR_LINUX_USER $command"
}

runCmd(){
   eval "/usr/bin/env -i $1"
}

runCmdAsLinuxUser(){
   runCmd "/usr/local/bin/sudo -u $VAR_LINUX_USER $1"
}

configFromVarGroup(){
   local p1=""
   if [ -z "$2" ]
   then
      p1="noquote"
   else
      p1=$2
   fi
   allVars $p1 _$1
}

tryRunStage(){
   if [ -f "/start/stage$1" ]
   then
      . "/start/stage$1"
      tryRunStage "$(( $1 + 1 ))"
   fi
}

runBinCmdAsLinuxUser(){
   /bin/chown $VAR_LINUX_USER /bin
   local -
   set +e
   runCmdAsLinuxUser "$1"
   local exitCode=$?
   set -e
   /bin/chown root /bin
   return $exitCode
}
